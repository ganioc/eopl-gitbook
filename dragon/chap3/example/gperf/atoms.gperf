%{ /* -*- C -*- */
#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <m4module.h>
#include <stdint.h>
#include "numeral.h"
%}

struct atom_s
{
	const char *name;
	const uintmax_t value;
};
%%
# Units.
zero,   0
one,    1
two,    2
three,  3
four,   4
five,   5
six,    6
seven,  7
eight,  8
nine,   9
# Teens.
ten,       10
eleven,    11
twelve,    12
thirteen,  13
fourteen,  14
fifteen,   15
sixteen,   16
seventeen, 17
eighteen,  18
nineteen,  19
# Tens.
twenty,    20
thirty,    30
forty,     40
fifty,     50
sixty,     60
seventy,   70
eighty,    80
ninety,    90
# Hundreds.
hundred,   100
hundreds,  100
# Powers of thousand.
thousands,     1000
thousand,      1000
million,       1000000
millions,      1000000
billion,       1000000000
billions,      1000000000
trillion,      1000000000000
trillions,     1000000000000
quadrillion,   1000000000000000
quadrillions,  1000000000000000
quintillion,   1000000000000000000
quintillions,  1000000000000000000
%%
uintmax_t numeral_convert(const char *str){
	const char *alphabet = "abcdefghijklmnopqrstuvwxyz";
	uintmax_t res = 0, hundreds = 0, pre_value = 0;

	while (str = strpbrk(str, alphabet)){
		size_t len = strspn(str, alphabet);
		struct atom_s *atom = in_word_set(str,len);
		if(!atom){
			numeral_error = strndup(str, len);
			return 0;
		}
		if(atom->value >= 1000){
			res += (hundreds?:1)*atom->value;
			hundreds = 0;
		}
		else if(pre_value <= atom->value){
			hundreds = (hundreds?:1)*atom->value;
		}
		else{
			hundreds += atom->value;
		}

		pre_value = atom->value;
		str += len;
	}

	return res + hundreds;

}




